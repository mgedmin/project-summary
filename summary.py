#!/usr/bin/python3
"""
Generate a summary for all my projects.
"""

import argparse
import datetime
import glob
import itertools
import linecache
import logging
import math
import os
import re
import subprocess
import sys
import time
import traceback
from collections import namedtuple

try:
    from cStringIO import StringIO
except ImportError:
    from io import StringIO

try:
    from configparser import SafeConfigParser
except ImportError:
    from ConfigParser import SafeConfigParser

import arrow
import mako.template
import mako.exceptions
import requests
import requests_cache


__author__ = 'Marius Gedminas <marius@gedmin.as>'
__version__ = '0.12.1'

log = logging.getLogger('project-summary')


#
# Utilities
#

class reify(object):
    def __init__(self, fn):
        self.fn = fn

    def __get__(self, obj, cls=None):
        value = self.fn(obj)
        obj.__dict__[self.fn.__name__] = value
        return value


def format_cmd(cmd, cwd=None):
    if 'cwd':
        return 'cd %s && %s' % (cwd, ' '.join(cmd))
    else:
        return ' '.join(cmd)


def pipe(*cmd, **kwargs):
    ignore_errors = kwargs.pop('ignore_errors', False)
    log.debug('EXEC %s', format_cmd(cmd, kwargs.get('cwd')))
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, **kwargs)
    stdout, stderr = p.communicate()
    if p.returncode and not ignore_errors:
        log.warning('%s produced a non-zero exit code: %d',
                    format_cmd(cmd, kwargs.get('cwd')),
                    p.returncode)
    if stderr and not ignore_errors:
        log.log(logging.WARNING if p.returncode else logging.INFO,
                '%s produced output on stderr:\n%s',
                format_cmd(cmd, kwargs.get('cwd')),
                stderr.decode('UTF-8', 'replace'))
    return stdout.decode('UTF-8', 'replace')


def to_seconds(value):
    units = {
        1: ('s', 'sec', 'second', 'seconds'),
        60: ('m', 'min', 'minute', 'minutes'),
        3600: ('h', 'hour', 'hours'),
    }
    s = value.replace(' ', '')
    if s.isdigit():
        return int(s)
    for multiplier, suffixes in units.items():
        for suffix in suffixes:
            if s.endswith(suffix):
                prefix = s[:-len(suffix)]
                if prefix.isdigit():
                    return int(prefix) * multiplier
    raise ValueError('bad time: %s' % value)


#
# Configuration
#

JenkinsJobConfig = namedtuple('JenkinsJobConfig', 'name_template title')
JenkinsJobConfig.__new__.__defaults__ = ('{name}', '')


class Configuration(object):

    _defaults = '''
        [project-summary]
        projects =
        ignore =
        skip-branches = False
        fetch = False
        pull = False
        appveyor-account =
        jenkins-url =
        jenkins-jobs = {name}
        footer = Generated by <a href="https://github.com/mgedmin/project-summary">project-summary</a>.
    '''.replace('\n        ', '\n').strip()

    def __init__(self, filename='project-summary.cfg'):
        cp = SafeConfigParser()
        cp.readfp(StringIO(self._defaults), '<defaults>')
        cp.read([filename])
        self._config = cp

    @reify
    def projects(self):
        return self._config.get('project-summary', 'projects').split()

    @reify
    def ignore(self):
        return self._config.get('project-summary', 'ignore').split()

    @reify
    def skip_branches(self):
        return self._config.getboolean('project-summary', 'skip-branches')

    @reify
    def fetch(self):
        return self._config.getboolean('project-summary', 'fetch')

    @reify
    def pull(self):
        return self._config.getboolean('project-summary', 'pull')

    @reify
    def appveyor_account(self):
        return self._config.get('project-summary', 'appveyor-account')

    @reify
    def jenkins_url(self):
        return self._config.get('project-summary', 'jenkins-url').rstrip('/')

    @reify
    def jenkins_jobs(self):
        return [
            JenkinsJobConfig(*job.split(None, 1))
            for job in self._config.get('project-summary', 'jenkins-jobs').splitlines()
            if job.strip()
        ] if self.jenkins_url else []

    @reify
    def footer(self):
        return self._config.get('project-summary', 'footer')


#
# Data extraction
#

class GitHubError(Exception):
    pass


class GitHubRateLimitError(GitHubError):
    pass


def is_cached(url, session):
    if not hasattr(session, 'cache'):
        return False
    if not session.cache.has_url(url):
        return False
    cache_key = session.cache.create_key(
        session.prepare_request(requests.Request('GET', url)))
    try:
        response, timestamp = session.cache.get_response_and_time(cache_key)
    except (ImportError, TypeError):
        return False
    if response is None or timestamp is None:
        return False
    # XXX: private attributes are not nice, I could take the value directly
    # from args.cache_duration and convert to datetime.timedelta()
    expire_after = session._cache_expire_after
    # XXX: there's a slight chance it might expire after I print but before I
    # actually do the query!
    is_expired = datetime.datetime.utcnow() - timestamp > expire_after
    return not is_expired


def log_url(url, session):
    if is_cached(url, session):
        log.debug('HIT %s', url)
    else:
        log.debug('GET %s', url)


def github_request(url, session):
    log_url(url, session)
    res = session.get(url)
    if res.status_code == 403 and res.headers.get('X-RateLimit-Remaining') == '0':
        reset_time = int(res.headers['X-RateLimit-Reset'])
        minutes = int(math.ceil((reset_time - time.time()) / 60))
        raise GitHubRateLimitError(
            '{message}\nTry again in {minutes} minutes, at {time}.'.format(
                message=res.json()['message'],
                minutes=minutes,
                time=time.strftime('%H:%M', time.localtime(reset_time)),
            ))
    elif 400 <= res.status_code < 500:
        raise GitHubError(res.json()['message'])
    try:
        res.json()
    except ValueError as e:
        raise GitHubError('{e}\nGot: {text!r}\nURL: {url}'.format(
            e=e, text=res.text, url=url))
    return res


def github_request_list(url, session, batch_size=100):
    res = github_request('%s?per_page=%d' % (url, batch_size), session)
    result = res.json()
    assert isinstance(result, list), result
    for page in itertools.count(2):
        if 'rel="next"' not in res.headers.get('Link', ''):
            break
        res = github_request('%s?per_page=%d&page=%d' % (url, batch_size, page),
                             session)
        batch = res.json()
        assert isinstance(batch, list), (page, batch)
        result.extend(batch)
    for item in result:
        assert isinstance(item, dict), result
    return result


#
# Data extraction
#

def get_repos(config):
    return sorted(
        dirname
        for path in config.projects
        for dirname in glob.glob(os.path.expanduser(path))
        if os.path.isdir(os.path.join(dirname, '.git'))
    )


def get_repo_url(repo_path):
    try:
        return pipe("git", "ls-remote", "--get-url", "origin", cwd=repo_path).strip()
    except IndexError:
        return None


def normalize_github_url(url):
    if not url:
        return url
    if url.startswith('git://github.com/'):
        url = 'https://github.com/' + url[len('git://github.com/'):]
    elif url.startswith('git@github.com:'):
        url = 'https://github.com/' + url[len('git@github.com:'):]
    if not url.startswith('https://github.com/'):
        return url
    if url.endswith('.git'):
        url = url[:-len('.git')]
    return url


def get_project_owner(url):
    return url.rpartition('/')[0].rpartition('/')[-1]


def get_project_name(url):
    return url.rpartition('/')[-1]


def get_branch_name(repo_path):
    name = pipe("git", "rev-parse", "--abbrev-ref", "HEAD",
                cwd=repo_path, stderr=subprocess.PIPE).strip()
    if name != 'HEAD':
        return name
    # detached head, oh my
    commit = pipe("git", "rev-parse", "HEAD",
                  cwd=repo_path, stderr=subprocess.PIPE).strip()
    names = set()
    for line in pipe("git", "show-ref", cwd=repo_path, stderr=subprocess.PIPE).splitlines():
        if line.startswith(commit):
            name = line.split()[1]
            if name.startswith('refs/'):
                name = name[len('refs/'):]
            if name.startswith('heads/'):
                name = name[len('remotes/'):]
            elif name.startswith('remotes/'):
                name = name[len('remotes/'):]
                if name.startswith('origin/'):
                    name = name[len('origin/'):]
            if name != 'HEAD':
                names.add(name)
    # if several branches point to the same commit, we must've done a
    # fast-forward merge.  if one of those branches is master, we want it,
    # otherwise we might incorrectly skip this repo due to --skip-branches
    if 'master' in names:
        return 'master'
    if names:
        return sorted(names)[0]
    # okay, we have a _stale_ detached head, Jenkins must be dropping
    # github notifications again!
    for line in pipe("git", "branch", "-r", "--contains", name, cwd=repo_path, stderr=subprocess.PIPE).splitlines():
        name = line[2:].strip()
        if name.startswith('origin/'):
            name = name[len('origin/'):]
        if 'HEAD detached at' not in name:
            return name
    return '(detached)'


def get_last_tag(repo_path):
    return pipe("git", "describe", "--tags", "--abbrev=0",
                cwd=repo_path, stderr=subprocess.PIPE, ignore_errors=True).strip()


def get_date_of_tag(repo_path, tag):
    return pipe("git", "log", "-1", "--format=%ai", tag, cwd=repo_path).strip()


def get_pending_commits(repo_path, last_tag, branch='master'):
    return pipe("git", "log", "--oneline", "{}..origin/{}".format(last_tag, branch),
                cwd=repo_path).splitlines()


def get_supported_python_versions(repo_path):
    classifiers = pipe(sys.executable, "setup.py", "--classifiers",
                       cwd=repo_path, stderr=subprocess.PIPE).splitlines()
    prefix = 'Programming Language :: Python :: '
    impl_prefix = 'Programming Language :: Python :: Implementation :: '
    cpython = impl_prefix + 'CPython'
    return [
        s[len(prefix):]
        for s in classifiers
        if s.startswith(prefix) and s[len(prefix):len(prefix) + 1].isdigit()
    ] + [
        s[len(impl_prefix):]
        for s in classifiers
        if s.startswith(impl_prefix) and s != cpython
    ]


def simplify_python_versions(versions):
    versions = sorted(versions)
    if '2' in versions and any(v.startswith('2.') for v in versions):
        versions.remove('2')
    if '3' in versions and any(v.startswith('3.') for v in versions):
        versions.remove('3')


class Project(object):

    def __init__(self, working_tree, config, session):
        self.working_tree = working_tree
        self.config = config
        self.session = session

    def _http_get(self, url, **kwargs):
        log_url(url, self.session)
        return self.session.get(url, **kwargs)

    def fetch(self):
        pipe('git', 'fetch', '--prune', cwd=self.working_tree)

    def pull(self):
        pipe('git', 'pull', '--prune', cwd=self.working_tree)

    def precompute(self, attrs):
        # trigger all the @reify decorators
        for attr in attrs:
            getattr(self, attr)

    @reify
    def url(self):
        return normalize_github_url(get_repo_url(self.working_tree))

    @reify
    def is_on_github(self):
        return self.url.startswith('https://github.com/')

    @reify
    def uses_travis(self):
        if not self.is_on_github:
            return False
        return os.path.exists(os.path.join(self.working_tree, '.travis.yml'))

    @reify
    def uses_appveyor(self):
        if not self.is_on_github or not self.config.appveyor_account:
            return False
        return os.path.exists(os.path.join(self.working_tree, 'appveyor.yml'))

    @property
    def uses_jenkins(self):
        return bool(self.config.jenkins_url)

    @reify
    def branch(self):
        return get_branch_name(self.working_tree)

    @reify
    def last_tag(self):
        return get_last_tag(self.working_tree)

    @reify
    def last_tag_date(self):
        return get_date_of_tag(self.working_tree, self.last_tag)

    @reify
    def pending_commits(self):
        return get_pending_commits(self.working_tree, self.last_tag, self.branch)

    @property
    def owner(self):
        if self.is_on_github:
            return get_project_owner(self.url)
        else:
            return None

    @property
    def name(self):
        if self.url:
            return get_project_name(self.url)
        else:
            return os.path.basename(self.working_tree)

    @property
    def pypi_url(self):
        return 'https://pypi.org/project/{name}/'.format(name=self.name)

    @property
    def jenkins_job(self):
        if os.path.basename(self.working_tree) == 'workspace':
            return os.path.basename(os.path.dirname(self.working_tree))
        else:
            return os.path.basename(self.working_tree)

    @property
    def compare_url(self):
        if not self.is_on_github:
            return None
        return '{base}/compare/{tag}...{branch}'.format(base=self.url,
                                                        branch=self.branch,
                                                        tag=self.last_tag)

    @property
    def travis_image_url(self):
        if not self.uses_travis:
            return None
        # Travis has 20px-high SVG images in the new (flat) style
        template = 'https://api.travis-ci.org/{owner}/{name}.svg?branch={branch}'
        return template.format(name=self.name, owner=self.owner, branch=self.branch)

    @property
    def travis_url(self):
        if not self.uses_travis:
            return None
        return 'https://travis-ci.org/{owner}/{name}'.format(name=self.name,
                                                             owner=self.owner)

    @reify
    def travis_status(self):
        if not self.uses_travis:
            return None
        res = self._http_get(self.travis_image_url)
        return self._parse_svg_text(res.text, skip_words={'build'})

    def _parse_svg_text(self, svg_text, skip_words=()):
        # let's parse SVG with regexps, what could go wrong???
        text_rx = re.compile(r'<text([^>]*)>([^<]*)</text>')
        status = []
        for attrs, text in text_rx.findall(svg_text):
            if 'fill-opacity' in attrs:
                # ignore shadow
                continue
            if text not in skip_words:
                status.append(text)
        return ' '.join(status)

    @property
    def appveyor_image_url(self):
        if not self.uses_appveyor:
            return None
        template = 'https://ci.appveyor.com/api/projects/status/github/{owner}/{name}?branch={branch}&svg=true'
        return template.format(name=self.name, owner=self.owner, branch=self.branch)

    @property
    def appveyor_url(self):
        if not self.uses_appveyor:
            return None
        return 'https://ci.appveyor.com/project/{account}/{name}/branch/{branch}'.format(
            name=self.name, account=self.config.appveyor_account, branch=self.branch)

    @reify
    def appveyor_status(self):
        if not self.uses_appveyor:
            return None
        res = self._http_get(self.appveyor_image_url)
        return self._parse_svg_text(res.text, skip_words={'build'})

    @property
    def coveralls_image_url(self):
        if not self.uses_travis:
            return None
        # 18px-high PNG
        # template = 'https://coveralls.io/repos/{owner}/{name}/badge.png?branch=master'
        # 20px-high flat SVG
        template = 'https://coveralls.io/repos/{owner}/{name}/badge.svg?branch={branch}'
        # SVG from shields.io (slow)
        # template = 'https://img.shields.io/coveralls/{owner}/{name}.svg?style=flat'
        return template.format(name=self.name, owner=self.owner, branch=self.branch)

    @property
    def coveralls_url(self):
        if not self.uses_travis:
            return None
        return 'https://coveralls.io/r/{owner}/{name}?branch={branch}'.format(
            name=self.name, owner=self.owner, branch=self.branch)

    @reify
    def coverage_number(self):
        url = self.coveralls_image_url
        if not url:
            return None
        res = self._http_get(url, allow_redirects=False)
        location = res.headers.get('Location')
        if res.status_code != 302 or not location:
            return None
        PREFIX = 'https://s3.amazonaws.com/assets.coveralls.io/badges/coveralls_'
        SUFFIX = '.svg'
        if location.startswith(PREFIX) and location.endswith(SUFFIX):
            coverage = location[len(PREFIX):-len(SUFFIX)]
            if coverage.isdigit():  # could be 'unknown'
                return int(coverage)
        return None

    def coverage(self, format='{}', unknown='-1'):
        if self.coverage_number is None:
            return unknown
        else:
            return format.format(self.coverage_number)

    def get_jenkins_image_url(self, job_config=JenkinsJobConfig()):
        if not self.uses_jenkins:
            return None
        return '{base}/job/{name}/badge/icon'.format(
            base=self.config.jenkins_url,
            name=job_config.name_template.format(name=self.jenkins_job),
        )

    def get_jenkins_url(self, job_config=JenkinsJobConfig()):
        if not self.uses_jenkins:
            return None
        return '{base}/job/{name}/'.format(
            base=self.config.jenkins_url,
            name=job_config.name_template.format(name=self.jenkins_job),
        )

    def get_jenkins_status(self, job_config=JenkinsJobConfig()):
        if not self.uses_jenkins:
            return None
        url = self.get_jenkins_image_url(job_config)
        res = self._http_get(url)
        return self._parse_svg_text(res.text, skip_words={'build'})

    @reify
    def python_versions(self):
        return get_supported_python_versions(self.working_tree)

    @reify
    def github_issues_and_pulls(self):
        if not self.is_on_github:
            return []
        url = 'https://api.github.com/repos/{owner}/{name}/issues'.format(
            owner=self.owner, name=self.name)
        return github_request_list(url, self.session)

    @reify
    def github_issues(self):
        return [issue for issue in self.github_issues_and_pulls
                if 'pull_request' not in issue]

    @reify
    def github_pulls(self):
        return [issue for issue in self.github_issues_and_pulls
                if 'pull_request' in issue]

    @reify
    def open_issues_count(self):
        return len(self.github_issues)

    @reify
    def unlabeled_open_issues_count(self):
        return sum(1 for issue in self.github_issues if not issue['labels'])

    @reify
    def issues_url(self):
        if not self.is_on_github:
            return None
        return '{base}/issues'.format(base=self.url)

    @reify
    def open_pulls_count(self):
        return len(self.github_pulls)

    @reify
    def unlabeled_open_pulls_count(self):
        return sum(1 for issue in self.github_pulls if not issue['labels'])

    @reify
    def pulls_url(self):
        if not self.is_on_github:
            return None
        return '{base}/pulls'.format(base=self.url)


def get_projects(config, session):
    for path in get_repos(config):
        p = Project(path, config, session)
        if p.name in config.ignore:
            continue
        if config.skip_branches and p.branch != 'master':
            continue
        if config.fetch:
            p.fetch()
        if config.pull:
            p.pull()
        if p.last_tag:
            yield p


#
# Templating
#

def mako_error_handler(context, error):
    """Decorate tracebacks when Mako errors happen.

    Evil hack: walk the traceback frames, find compiled Mako templates,
    stuff their (transformed) source into linecache.cache.

    https://gist.github.com/mgedmin/4269249
    """
    rich_tb = mako.exceptions.RichTraceback()
    rich_iter = iter(rich_tb.traceback)
    tb = sys.exc_info()[-1]
    source = {}
    annotated = set()
    while tb is not None:
        cur_rich = next(rich_iter)
        f = tb.tb_frame
        co = f.f_code
        filename = co.co_filename
        lineno = tb.tb_lineno
        if filename.startswith('memory:'):
            lines = source.get(filename)
            if lines is None:
                info = mako.template._get_module_info(filename)
                lines = source[filename] = info.module_source.splitlines(True)
                linecache.cache[filename] = (None, None, lines, filename)
            if (filename, lineno) not in annotated:
                annotated.add((filename, lineno))
                extra = '    # {0} line {1} in {2}:\n    # {3}'.format(*cur_rich)
                lines[lineno - 1] += extra
        tb = tb.tb_next
    # Don't return False -- that will lose the actual Mako frame.  Instead
    # re-raise.
    raise


def Template(*args, **kw):
    return mako.template.Template(error_handler=mako_error_handler,
                                  strict_undefined=True,
                                  default_filters=['unicode', 'h'],
                                  *args, **kw)


#
# Report generation
#

template = Template('''\
<!DOCTYPE html>
<%
versions = ['2.7', '3.5', '3.6', '3.7', '3.8', 'PyPy']
eol_date = {
    # https://devguide.python.org/#status-of-python-branches
    '2.7': '2020-01-01',
    '3.5': '2020-09-13',
    '3.6': '2021-12-23',
    '3.7': '2023-06-27',
    '3.8': '2024-10-01',  # approximate
}
%>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Projects</title>

    <link rel="stylesheet" href="assets/css/bootstrap.min.css">

    <style type="text/css">
      th { white-space: nowrap; }
      td > a > img { position: relative; top: -1px; }
      .tablesorter-icon { color: #ddd; }
      .tablesorter-header { cursor: default; }
      .invisible { visibility: hidden; }
      #release-status th.date,
      #release-status td.date,
      #release-status th.changes,
      #release-status td.changes,
      #release-status th.status,
      #release-status td.status { text-align: right; }
      #maintenance th.status,
      #maintenance td.status { padding-right: 0; }
      #maintenance th.issues,
      #maintenance td.issues,
      #maintenance th.pulls,
      #maintenance td.pulls { text-align: right; }
      #maintenance span.new { font-weight: bold; }
      #maintenance span.none { color: #999; }
      #python-versions span.no,
      #python-versions span.yes {
        padding: 2px 4px 3px 4px;
        font-family: DejaVu Sans, Verdana, Geneva, sans-serif;
        font-size: 11px;
        position: relative;
        bottom: 2px;
      }
      #python-versions span.no {
        color: #888;
      }
      #python-versions span.yes {
        color: #fff;
        background-color: #4c1;
        text-shadow: 0px 1px 0px rgba(1, 1, 1, 0.3);
        border-radius: 4px;
      }
      footer { padding-top: 16px; padding-bottom: 16px; text-align: center; color: #999; }

      @media (max-width: 992px) {
        .container { width: auto; }
      }
      @media (max-width: 600px) {
        .page-header {
          display: flex;
          flex-flow: column;
        }
        .page-header .pull-right {
          float: none !important;
          display: box;
          margin: 0 auto;
        }
      }
      @media (max-width: 769px) {
        .page-header { margin-bottom: 0; }
        table, tbody, th, td, tr { display: block; }
        thead { display: none; }
        tr:first-child > td:first-child {
          border-top: none !important;
        }
        td:not(:first-child) {
          padding: 0px 2em 8px 2em !important;
          border-top: none !important;
        }
        #release-status td.version:before { content: "Last release: "; }
        #release-status td.date:before { content: "Date: "; }
        #release-status td.changes:before { content: "Pending changes: "; }
        #release-status td.status:before { content: "Travis CI status: "; }
        #release-status td.date,
        #release-status td.changes,
        #release-status td.status { text-align: left; }
        #maintenance td.version:before { content: "Last release: "; }
        #maintenance td:nth-child(2):before { content: "Travis CI status: "; }
<% n = 2 %>
% for n, job in enumerate(config.jenkins_jobs, start=3):
        #maintenance td:nth-child(${n}):before { content: "Jenkins ${job.title} status: "; }
% endfor
        #maintenance td:nth-child(${n+1}):before { content: "Appveyor status: "; }
        #maintenance td:nth-child(${n+2}):before { content: "Coveralls status: "; }
        #maintenance td.issues:before { content: "GitHub issues: "; }
        #maintenance td.pulls:before { content: "GitHub pull requests: "; }
        #maintenance td.issues,
        #maintenance td.pulls { text-align: left; }
% for n, ver in enumerate(versions, start=2):
        #python-versions td:nth-child(${n}):before { content: "${ver if ver.startswith('PyPy') else 'Python %s' % ver}: "; }
% endfor
        #python-versions td[data-coverage]:before { content: "Coveralls status: "; }
        td:before { display: inline-block; width: 50%; }
      }
    </style>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

<%def name="project_name(project)">\\
<a href="${project.url}">${project.name}</a>\\
% if project.branch != 'master':
 (${project.branch})\\
% endif
</%def>

<%def name="issues(new_count, total_count, url)">\\
<a href="${url}" title="${new_count} new, ${total_count} total">\\
% if new_count == 0:
<span class="none">${new_count}</span> \\
% else:
<span class="new">${new_count}</span> \\
% endif
% if total_count == 0:
<span class="none">(${total_count})</span>\\
% else:
(${total_count})\\
% endif
</a>\\
</%def>

  <body role="document">
    <div class="container">

      <div class="page-header">
        <div class="btn-group pull-right" role="menu">
          <a class="btn btn-primary" data-toggle="tab" href="#release-status">Release status</a>
          <a class="btn btn-default" data-toggle="tab" href="#maintenance">Maintenance</a>
          <a class="btn btn-default" data-toggle="tab" href="#python-versions">Python versions</a>
        </div>
        <h1>Projects</h1>
      </div>

      <div class="tab-content">

        <div class="tab-pane active" id="release-status">
          <table class="table table-hover">
            <thead>
              <tr>
                <th class="name">Name</th>
                <th class="version">Last release</th>
                <th class="date">Date</th>
                <th class="changes">Pending changes</th>
                <th class="status">Build status</th>
              </tr>
            </thead>
            <tbody>
% for project in projects:
              <tr>
                <td class="name">${project_name(project)}</td>
                <td class="version"><a href="${project.pypi_url}">${project.last_tag}</a></td>
                <td class="date" title="${project.last_tag_date}">${nice_date(project.last_tag_date)}</td>
                <td class="changes"><a href="${project.compare_url}">${pluralize(len(project.pending_commits), 'commits')}</a></td>
%     if project.travis_url:
                <td class="status"><a href="${project.travis_url}"><img src="${project.travis_image_url}" alt="${project.travis_status}" height="20"></a></td>
%     else:
                <td class="status">-</td>
%     endif
              </tr>
% endfor
            </tbody>
          </table>
        </div>

        <div class="tab-pane" id="maintenance">
          <table class="table table-hover">
            <colgroup>
              <col width="15%">
              <col width="15%">
% for job in config.jenkins_jobs:
              <col width="15%">
% endfor
              <col width="15%">
              <col width="15%">
              <col width="5%">
              <col width="5%">
            </colgroup>
            <thead>
              <tr>
                <th class="name">Name</th>
                <th class="status">Travis CI</th>
% for job in config.jenkins_jobs:
                <th class="status">Jenkins ${job.title}</th>
% endfor
                <th class="status">Appveyor</th>
                <th class="status">Coveralls</th>
                <th class="issues">Issues</th>
                <th class="pulls">PRs</th>
              </tr>
            </thead>
            <tbody>
% for project in projects:
              <tr>
                <td class="name">${project_name(project)}</td>
%     if project.travis_url:
                <td class="status"><a href="${project.travis_url}"><img src="${project.travis_image_url}" alt="${project.travis_status}" height="20"></a></td>
%     else:
                <td class="status">-</td>
%     endif
% for job in config.jenkins_jobs:
%     if project.uses_jenkins:
                <td class="status"><a href="${project.get_jenkins_url(job)}"><img src="${project.get_jenkins_image_url(job)}" alt="${project.get_jenkins_status(job)}" height="20"></a></td>
%     else:
                <td class="status">-</td>
%     endif
% endfor
%     if project.appveyor_url:
                <td class="status"><a href="${project.appveyor_url}"><img src="${project.appveyor_image_url}" alt="${project.appveyor_status}" height="20"></a></td>
%     else:
                <td class="status">-</td>
%     endif
%     if project.coveralls_url:
                <td class="status" data-coverage="${project.coverage()}"><a href="${project.coveralls_url}"><img src="${project.coveralls_image_url}" alt="${project.coverage('{}%', 'unknown')}" height="20"></a></td>
%     else:
                <td class="status">-</td>
%     endif
%     for css_class, new_count, total_count, url in [('issues', project.unlabeled_open_issues_count, project.open_issues_count, project.issues_url), ('pulls', project.unlabeled_open_pulls_count, project.open_pulls_count, project.pulls_url)]:
                <td class="${css_class}" data-total="${total_count}" data-new=${new_count}>${issues(new_count, total_count, url)}</td>
%     endfor
              </tr>
% endfor
            </tbody>
          </table>
        </div>

        <div class="tab-pane" id="python-versions">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Name</th>
% for ver in versions:
%     if ver in eol_date:
                <th title="Supported until ${eol_date[ver]}">${ver}</th>
%     else:
                <th>${ver}</th>
%     endif
% endfor
                <th>Test coverage</th>
              </tr>
            </thead>
            <tbody>
% for project in projects:
              <tr>
                <td>${project_name(project)}</td>
%     for ver in versions:
%         if ver in project.python_versions:
                <td><span class="yes">+</span></td>
%         else:
                <td><span class="no">&#x2212;</span></td>
%         endif
%     endfor
%     if project.coveralls_url:
                <td data-coverage="${project.coverage()}"><a href="${project.coveralls_url}"><img src="${project.coveralls_image_url}" alt=" ${project.coverage('{}%', 'unknown')}" height="20"></a></td>
%     else:
                <td>-</td>
%     endif
              </tr>
% endfor
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <footer>
      <div class="container">
        ${config.footer|n}
      </div>
    </footer>
    <script src="assets/js/jquery.min.js"></script>
    <script src="assets/js/jquery.tablesorter.min.js"></script>
    <script src="assets/js/jquery.tablesorter.widgets.min.js"></script>
    <script src="assets/js/bootstrap.min.js"></script>
    <script>
      $(function() {
        $.extend($.tablesorter.themes.bootstrap, {
            table        : '',
            caption      : '',
            header       : '',
            footerRow    : '',
            footerCells  : '',
            sortNone     : '',
            sortAsc      : '',
            sortDesc     : '',
            active       : '',
            hover        : 'active',
            icons        : '',
            iconSortNone : 'glyphicon glyphicon-sort invisible',
            iconSortAsc  : 'glyphicon glyphicon-sort-by-attributes',
            iconSortDesc : 'glyphicon glyphicon-sort-by-attributes-alt',
            filterRow    : '',
            footerRow    : '',
            footerCells  : '',
            even         : '',
            odd          : ''
          });
        var sortTitleAttribute = function(node, table, cellIndex) {
          return $(node).attr('title');
        };
        var sortAltText = function(node, table, cellIndex) {
          return $(node).attr('alt');
        };
        $("#release-status table").tablesorter({
          theme: "bootstrap",
          widgets: ['uitheme'],
          widthFixed: true,
          headerTemplate: ' {content} {icon}',
          onRenderHeader: function(idx, config, table) {
            if (idx >= 2) {
              var $this = $(this);
              $this.find('div').prepend($this.find('i'));
            }
          },
          sortList: [[0, 0]],
          textExtraction: {
            2: sortTitleAttribute,  // ISO-8601 date in title
            4: sortAltText          // build status in alt text
          }
        });
        var sortCoverage = function(node, table, cellIndex) {
          return $(node).attr('data-coverage');
        };
        var sortIssues = function(node, table, cellIndex) {
          /* note this can't start with a digit or tablesorter will discard the 2nd sort key */
          return 'new ' + $(node).attr('data-new') + ' old ' + $(node).attr('data-total');
        };
        $("#maintenance table").tablesorter({
          theme: "bootstrap",
          widgets: ['uitheme'],
          widthFixed: true,
          headerTemplate: ' {content} {icon}',
          onRenderHeader: function(idx, config, table) {
            if (idx >= 6) {
              var $this = $(this);
              $this.find('div').prepend($this.find('i'));
            }
          },
          sortList: [[0, 0]],
          textExtraction: {
            1: sortAltText, // travis ci build status in alt text
            2: sortAltText, // jenkins build status in alt text
            3: sortAltText, // jenkins build status in alt text
            4: sortAltText, // appveyor build status in alt text
            5: sortCoverage, // coverage percentage in data attribute
            6: sortIssues, // issue counts in data attributes
            7: sortIssues  // PR counts in data attributes
          }
        });
        $("#python-versions table").tablesorter({
          theme: "bootstrap",
          widgets: ['uitheme'],
          widthFixed: true,
          headerTemplate: '{content} {icon}',
          sortList: [[0, 0]],
          textExtraction: {
            ${1 + len(versions)}: sortCoverage
          }
        });
        var dont_recurse = false;
        $('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
          $(e.target).siblings('.btn-primary').removeClass('btn-primary').addClass('btn-default');
          $(e.target).removeClass('btn-default').addClass('btn-primary');
          if (!dont_recurse) {
            dont_recurse = true;
            if (history.pushState) {
              history.pushState(null, null, '#'+$(e.target).attr('href').substr(1));
            } else {
              location.hash = '#'+$(e.target).attr('href').substr(1);
            }
            dont_recurse = false;
          }
        });
        if (location.hash !== '') {
          dont_recurse = true;
          $('a[href="' + location.hash + '"]').tab('show');
          dont_recurse = false;
        }
        $(window).bind('hashchange', function() {
          if (!dont_recurse) {
            dont_recurse = true;
            $('a[href="' + (location.hash || '#release-status') + '"]').tab('show');
            dont_recurse = false;
          }
        });
      });
    </script>
  </body>
</html>
''')


def nice_date(date_string):
    # specify format because https://github.com/crsmithdev/arrow/issues/82
    return arrow.get(date_string, 'YYYY-MM-DD HH:mm:ss Z').humanize()


def pluralize(number, noun):
    if number == 1:
        assert noun.endswith('s')
        noun = noun[:-1]  # poor Englishman's i18n
    return '{} {}'.format(number, noun)


def main():
    parser = argparse.ArgumentParser(
        description="Summarize release status of several projects")
    parser.add_argument('--version', action='version',
                        version="%(prog)s version " + __version__)
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='be more verbose (can be repeated)')
    parser.add_argument('--skip-branches', action='store_true',
                        help="ignore checkouts that aren't of the main branch")
    parser.add_argument('--html', action='store_true',
                        help='produce HTML output')
    parser.add_argument('-o', metavar='FILENAME', dest='output_file',
                        help='write the output to a file (default: stdout)')
    parser.add_argument('--http-cache', default='.httpcache', metavar='DBNAME',
                        # .sqlite will be appended automatically
                        help='cache HTTP requests on disk in an sqlite database (default: %(default)s)')
    parser.add_argument('--no-http-cache', action='store_false', dest='http_cache',
                        help='disable HTTP disk caching')
    parser.add_argument('--cache-duration', default='30m',
                        help='how long to cache HTTP requests (default: %(default)s)')
    parser.add_argument('--fetch', '--update', action='store_true',
                        help='run git fetch in each project')
    parser.add_argument('--pull', action='store_true',
                        help='run git pull in each project')
    args = parser.parse_args()

    log.addHandler(logging.StreamHandler())
    log.setLevel(logging.DEBUG if args.verbose >= 3 else
                 logging.INFO if args.verbose >= 1 else
                 logging.ERROR)

    if args.http_cache:
        log.debug('caching HTTP requests for %s', args.cache_duration)
        requests_cache.install_cache(
            args.http_cache,
            backend='sqlite',
            expire_after=to_seconds(args.cache_duration),
            allowable_codes=(200, 302),
        )

    session = requests.Session()

    config = Configuration()
    if args.fetch is not None:
        config.fetch = args.fetch
    if args.pull is not None:
        config.pull = args.pull
    if args.skip_branches is not None:
        config.skip_branches = args.skip_branches
    projects = get_projects(config, session)
    if args.html:
        try:
            print_html_report(projects, config, args.output_file)
        except GitHubError as e:
            sys.exit("GitHub error: %s" % e)
        except Exception:
            # if I let CPython print the exception, it'll ignore all of
            # my extra information stuffed into linecache :/
            traceback.print_exc()
            sys.exit(1)
    else:
        if args.output_file:
            print("warning: --output-file ignored in non-HTML mode")
        print_report(projects, args.verbose)


def print_report(projects, verbose):
    for project in projects:
        project.precompute('name pending_commits last_tag last_tag_date'.split())
        if verbose >= 1:
            project.precompute('compare_url python_versions'.split())
        if verbose >= 2:
            project.precompute('working_tree'.split())
        print("{name:24} {commits:4} commits since {release:6} ({date})".format(
            name=project.name, commits=len(project.pending_commits),
            release=project.last_tag, date=nice_date(project.last_tag_date)))
        if verbose >= 1:
            print("  {}".format(project.compare_url))
            if verbose >= 2:
                print("  {}".format(project.working_tree))
            print("  Python versions: {}".format(", ".join(project.python_versions)))
            print("")


def print_html_report(projects, config, filename=None):
    # I want atomicity: don't destroy old .html file if an exception happens
    # during rendering.
    html = template.render_unicode(projects=list(projects),
                                   config=config,
                                   nice_date=nice_date,
                                   pluralize=pluralize)
    if filename and filename != '-':
        with open(filename, 'w') as f:
            f.write(html)
    else:
        print(html)


if __name__ == '__main__':
    main()
